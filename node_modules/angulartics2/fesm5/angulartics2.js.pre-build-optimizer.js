import { InjectionToken, Inject, Injectable, Directive, ElementRef, Input, NgModule, Renderer2 } from '@angular/core';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { __spread, __assign, __values } from 'tslib';
import { filter, delay, map } from 'rxjs/operators';
import { Location } from '@angular/common';
import { NavigationEnd, Router } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DefaultConfig = /** @class */ (function () {
    function DefaultConfig() {
        this.pageTracking = {
            autoTrackVirtualPages: true,
            basePath: '',
            excludedRoutes: [],
            clearIds: false,
            clearHash: false,
            clearQueryParams: false,
            idsRegExp: /^\d+$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/,
        };
        this.developerMode = false;
        this.ga = {};
        this.appInsights = {};
        this.gtm = {};
    }
    return DefaultConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ ANGULARTICS2_TOKEN = new InjectionToken('ANGULARTICS2');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RouterlessTracking = /** @class */ (function () {
    function RouterlessTracking() {
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    RouterlessTracking.prototype.trackLocation = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        return new BehaviorSubject({ url: '/' });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RouterlessTracking.prototype.prepareExternalUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url;
    };
    return RouterlessTracking;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Angulartics2 = /** @class */ (function () {
    function Angulartics2(tracker, setup) {
        var _this = this;
        this.tracker = tracker;
        this.pageTrack = new ReplaySubject(10);
        this.eventTrack = new ReplaySubject(10);
        this.exceptionTrack = new ReplaySubject(10);
        this.setAlias = new ReplaySubject(10);
        this.setUsername = new ReplaySubject(10);
        this.setUserProperties = new ReplaySubject(10);
        this.setUserPropertiesOnce = new ReplaySubject(10);
        this.setSuperProperties = new ReplaySubject(10);
        this.setSuperPropertiesOnce = new ReplaySubject(10);
        this.userTimings = new ReplaySubject(10);
        var /** @type {?} */ defaultConfig = new DefaultConfig();
        this.settings = __assign({}, defaultConfig, setup.settings);
        this.settings.pageTracking = __assign({}, defaultConfig.pageTracking, setup.settings.pageTracking);
        this.tracker
            .trackLocation(this.settings)
            .subscribe(function (event) {
            return _this.trackUrlChange(event.url);
        });
    }
    /** filters all events when developer mode is true */
    /**
     * filters all events when developer mode is true
     * @template T
     * @return {?}
     */
    Angulartics2.prototype.filterDeveloperMode = /**
     * filters all events when developer mode is true
     * @template T
     * @return {?}
     */
    function () {
        var _this = this;
        return filter(function (value, index) { return !_this.settings.developerMode; });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    Angulartics2.prototype.trackUrlChange = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {
            var /** @type {?} */ clearedUrl = this.clearUrl(url);
            var /** @type {?} */ path = void 0;
            if (this.settings.pageTracking.basePath.length) {
                path = this.settings.pageTracking.basePath + clearedUrl;
            }
            else {
                path = this.tracker.prepareExternalUrl(clearedUrl);
            }
            this.pageTrack.next({ path: path });
        }
    };
    /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param url location
     */
    /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param {?} url location
     * @return {?}
     */
    Angulartics2.prototype.matchesExcludedRoute = /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param {?} url location
     * @return {?}
     */
    function (url) {
        try {
            for (var _a = __values(this.settings.pageTracking.excludedRoutes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var excludedRoute = _b.value;
                var /** @type {?} */ matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);
                if (matchesRegex || url.indexOf(/** @type {?} */ (excludedRoute)) !== -1) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
        var e_1, _c;
    };
    /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param url current page path
     */
    /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param {?} url current page path
     * @return {?}
     */
    Angulartics2.prototype.clearUrl = /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param {?} url current page path
     * @return {?}
     */
    function (url) {
        var _this = this;
        if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams ||
            this.settings.pageTracking.clearHash) {
            return url
                .split('/')
                .map(function (part) { return _this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part; })
                .map(function (part) { return _this.settings.pageTracking.clearHash ? part.split('#')[0] : part; })
                .filter(function (part) { return !_this.settings.pageTracking.clearIds || !part.match(_this.settings.pageTracking.idsRegExp); })
                .join('/');
        }
        return url;
    };
    Angulartics2.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Angulartics2.ctorParameters = function () { return [
        { type: RouterlessTracking },
        { type: undefined, decorators: [{ type: Inject, args: [ANGULARTICS2_TOKEN,] }] }
    ]; };
    return Angulartics2;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Track Route changes for applications using Angular's
 * default router
 *
 * @link https://angular.io/api/router/Router
 */
var AngularRouterTracking = /** @class */ (function () {
    function AngularRouterTracking(router, location) {
        this.router = router;
        this.location = location;
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    AngularRouterTracking.prototype.trackLocation = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        return this.router.events.pipe(filter(function (e) { return e instanceof NavigationEnd; }), filter(function () { return !settings.developerMode; }), map(function (e) {
            return { url: e.urlAfterRedirects };
        }), delay(0));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    AngularRouterTracking.prototype.prepareExternalUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.location.prepareExternalUrl(url);
    };
    AngularRouterTracking.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AngularRouterTracking.ctorParameters = function () { return [
        { type: Router },
        { type: Location }
    ]; };
    return AngularRouterTracking;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Angulartics2On = /** @class */ (function () {
    function Angulartics2On(elRef, angulartics2, renderer) {
        this.elRef = elRef;
        this.angulartics2 = angulartics2;
        this.renderer = renderer;
        this.angularticsProperties = {};
    }
    /**
     * @return {?}
     */
    Angulartics2On.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', function (event) { return _this.eventTrack(event); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Angulartics2On.prototype.eventTrack = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ action = this.angularticsAction; // || this.inferEventName();
        var /** @type {?} */ properties = __assign({}, this.angularticsProperties, { eventType: event.type });
        if (this.angularticsCategory) {
            properties.category = this.angularticsCategory;
        }
        if (this.angularticsLabel) {
            properties.label = this.angularticsLabel;
        }
        if (this.angularticsValue) {
            properties.value = this.angularticsValue;
        }
        this.angulartics2.eventTrack.next({
            action: action,
            properties: properties,
        });
    };
    Angulartics2On.decorators = [
        { type: Injectable },
        { type: Directive, args: [{ selector: '[angulartics2On]' },] }
    ];
    /** @nocollapse */
    Angulartics2On.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Angulartics2 },
        { type: Renderer2 }
    ]; };
    Angulartics2On.propDecorators = {
        angulartics2On: [{ type: Input, args: ['angulartics2On',] }],
        angularticsAction: [{ type: Input }],
        angularticsCategory: [{ type: Input }],
        angularticsLabel: [{ type: Input }],
        angularticsValue: [{ type: Input }],
        angularticsProperties: [{ type: Input }]
    };
    return Angulartics2On;
}());
var Angulartics2OnModule = /** @class */ (function () {
    function Angulartics2OnModule() {
    }
    Angulartics2OnModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [Angulartics2On],
                    exports: [Angulartics2On],
                },] }
    ];
    return Angulartics2OnModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Angulartics2Module = /** @class */ (function () {
    function Angulartics2Module() {
    }
    /**
     * @param {?} providers
     * @param {?=} settings
     * @return {?}
     */
    Angulartics2Module.forRoot = /**
     * @param {?} providers
     * @param {?=} settings
     * @return {?}
     */
    function (providers, settings) {
        if (settings === void 0) { settings = {}; }
        return {
            ngModule: Angulartics2Module,
            providers: __spread([
                { provide: ANGULARTICS2_TOKEN, useValue: { providers: providers, settings: settings } },
                Angulartics2,
                { provide: RouterlessTracking, useClass: AngularRouterTracking }
            ], providers),
        };
    };
    Angulartics2Module.decorators = [
        { type: NgModule, args: [{
                    imports: [Angulartics2OnModule],
                    exports: [Angulartics2On],
                },] }
    ];
    return Angulartics2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Angulartics2, Angulartics2Module, ANGULARTICS2_TOKEN, Angulartics2On, Angulartics2OnModule, RouterlessTracking, AngularRouterTracking, DefaultConfig };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,