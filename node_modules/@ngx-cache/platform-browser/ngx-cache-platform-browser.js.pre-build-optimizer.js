import { __values } from 'tslib';
import { isPlatformBrowser } from '@angular/common';
import { Inject, PLATFORM_ID, NgModule, Optional, SkipSelf } from '@angular/core';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { CacheService } from '@ngx-cache/core';

var LocalStorageCacheService = (function () {
    function LocalStorageCacheService(platformId) {
        this.platformId = platformId;
        if (!isPlatformBrowser(platformId))
            throw new Error('LocalStorageCacheService is not supported outside `browser` platform!');
    }
    Object.defineProperty(LocalStorageCacheService.prototype, "isEnabled", {
        get: function () {
            if (!isPlatformBrowser(this.platformId))
                return false;
            try {
                localStorage.setItem('test', 'test');
                localStorage.removeItem('test');
                return true;
            }
            catch (e) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocalStorageCacheService.prototype, "keys", {
        get: function () {
            if (!this.isEnabled)
                return undefined;
            var res = [];
            Object.keys(localStorage)
                .forEach(function (key) {
                res.push(key);
            });
            return res;
        },
        enumerable: true,
        configurable: true
    });
    LocalStorageCacheService.prototype.setItem = function (key, value) {
        if (!this.isEnabled)
            return false;
        try {
            localStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    LocalStorageCacheService.prototype.getItem = function (key) {
        if (!this.isEnabled)
            return undefined;
        var value = localStorage.getItem(key);
        return value ? JSON.parse(value) : undefined;
    };
    LocalStorageCacheService.prototype.removeItem = function (key, wild) {
        if (wild === void 0) { wild = false; }
        if (!this.isEnabled)
            return;
        localStorage.removeItem(key);
        if (wild)
            try {
                for (var _a = __values(this.keys), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var item = _b.value;
                    if (item.indexOf(key) === 0)
                        localStorage.removeItem(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        var e_1, _c;
    };
    LocalStorageCacheService.prototype.clear = function () {
        if (!this.isEnabled)
            return;
        localStorage.clear();
    };
    LocalStorageCacheService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return LocalStorageCacheService;
}());

var MemoryCacheService = (function () {
    function MemoryCacheService(platformId) {
        this.platformId = platformId;
        if (!this.isEnabled)
            throw new Error('MemoryCacheService is not supported outside `browser` platform!');
        this.memoryStorage = new Map();
    }
    Object.defineProperty(MemoryCacheService.prototype, "isEnabled", {
        get: function () {
            return isPlatformBrowser(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MemoryCacheService.prototype, "keys", {
        get: function () {
            if (!this.isEnabled)
                return undefined;
            return Array.from(this.memoryStorage.keys());
        },
        enumerable: true,
        configurable: true
    });
    MemoryCacheService.prototype.setItem = function (key, value) {
        if (!this.isEnabled)
            return false;
        this.memoryStorage.set(key, value);
        return true;
    };
    MemoryCacheService.prototype.getItem = function (key) {
        if (!this.isEnabled)
            return undefined;
        return this.memoryStorage.get(key);
    };
    MemoryCacheService.prototype.removeItem = function (key, wild) {
        if (wild === void 0) { wild = false; }
        if (!this.isEnabled)
            return;
        this.memoryStorage.delete(key);
        if (wild)
            try {
                for (var _a = __values(this.keys), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var item = _b.value;
                    if (item.indexOf(key) === 0)
                        this.memoryStorage.delete(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        var e_1, _c;
    };
    MemoryCacheService.prototype.clear = function () {
        if (!this.isEnabled)
            return;
        this.memoryStorage.clear();
    };
    MemoryCacheService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return MemoryCacheService;
}());

var BrowserCacheModule = (function () {
    function BrowserCacheModule(parentModule, transferState, cache) {
        this.transferState = transferState;
        this.cache = cache;
        if (parentModule)
            throw new Error('BrowserCacheModule already loaded; import in BROWSER module only.');
        var serverCache = this.getCacheValue();
        cache.rehydrate(serverCache);
    }
    BrowserCacheModule.forRoot = function (configuredProviders) {
        return {
            ngModule: BrowserCacheModule,
            providers: configuredProviders
        };
    };
    BrowserCacheModule.prototype.getCacheValue = function () {
        var stateKey = makeStateKey(this.cache.key);
        var state = this.transferState.get(stateKey, {});
        if (state)
            try {
                var serverCache = JSON.parse(state);
                this.transferState.remove(stateKey);
                return serverCache;
            }
            catch (e) { }
        return {};
    };
    BrowserCacheModule.decorators = [
        { type: NgModule },
    ];
    BrowserCacheModule.ctorParameters = function () { return [
        { type: BrowserCacheModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: TransferState },
        { type: CacheService }
    ]; };
    return BrowserCacheModule;
}());

export { BrowserCacheModule, LocalStorageCacheService, MemoryCacheService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,